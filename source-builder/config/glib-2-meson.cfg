#
# GLib 2.x.x meson version.
#
# This configuration file uses meson and ninja
#

%if %{release} == %{nil}
%define release 1
%endif

Name:      glib-%{glib_version}-%{_host}-%{release}
Summary:   GLib provides the core application building blocks for
           libraries and applications written in C.
Version:   %{glib_version}
Release:   %{release}
URL: 	   https://developer.gnome.org/glib/

#
# Source
#
%source set glib https://download.gnome.org/sources/glib/%{glib_version_major}/glib-%{glib_version}.tar.xz

%source set pcre2 https://github.com/PhilipHazel/pcre2/releases/download/pcre2-10.42/pcre2-10.42.tar.bz2
%hash sha512 pcre2-10.42.tar.bz2 \
       cvveh/7Ow6pLRyJd2RnqHVXpfyy88Cq6JuWg07H/tYwlqAqe8GnrmfnPTkG6lgStBqfsFZhw4eh12Ggg4SJW0w==

%define pcre2_patch_zip pcre2_10.42-2_patch.zip
%source set pcre2_patches --rsb-file=%{pcre2_patch_zip} https://wrapdb.mesonbuild.com/v2/pcre2_10.42-2/get_patch
%hash sha512 %{pcre2_patch_zip} \
       xLL5cBuNSNPOkPfWdrNXzM5M0ETH/d+NJTzV1JR7wq1W6LpYybjD6x42aVKFyVpLubKpYeRXKfCLaEt62W8Buw==

#
# If a dry-run and with download ignore errors and correct setting for tools.
# Only after the source to download.
#
%if %{_dry_run} && %{defined with_download}
 %log GLib configuration errors ignored
 %define glib_error 0
%else
 %define glib_error 1
%endif

#
# Check for meson and ninja
#
%define have_meson %(command -v meson || true)
%define have_ninja %(command -v ninja || true)

%if %{glib_error}
 %if %{have_meson} == %{nil}
  %error "glib: build requires meson, pleae install"
 %endif
 %if %{have_ninja} == %{nil}
  %error "glib: build requires ninja, pleae install"
 %endif
%endif

#
# Borrowed from:
#   https://github.com/freebsd/freebsd-ports/blob/main/devel/glib20/Makefile
#
%define glib_configure_options \
          -Db_lundef=false \
          -Ddefault_library=both \
          -Dtests=false \
          -Dinstalled_tests=false \
          -Dintrospection=disabled \
          -Dlibmount=disabled \
          -Dlocalstatedir=/var \
          -Druntime_dir=/var/run \
          -Dselinux=disabled \
          -Dxattr=false

#
# Prepare the source code.
#
%prep
  build_top=$(pwd)

  source_dir_glib="glib-%{glib_version}"
  %source setup glib -q -n glib-%{glib_version}
  %patch setup glib -p1

  mkdir -p subprojects/packagecache
  %source setup pcre2 -q -g -p subprojects/packagecache
  %source setup pcre2_patches -q -g -p subprojects/packagecache

  cd ${build_top}

%build
  build_top=$(pwd)

  cd ${source_dir_glib}

  %{host_build_flags}

  SYSROOT=$SB_TMPPREFIX

  # configure the build
  PKG_CONFIG_PATH=$SYSROOT/lib/pkgconfig \
  PKG_CONFIG_BUILD_TOP_DIR=$SB_TMPROOT \
  %{_library_path}=$SYSROOT/lib \
  %{_ld_library_path}=$SYSROOT/lib \
  LD="${CC} ${LDFLAGS}" \
  LD_FOR_BUILD="${CC_FOR_BUILD} ${LDFLAGS}" \
  LDFLAGS="${LDFLAGS} -Wl,-rpath -Wl,/$SB_PREFIX_CLEAN/lib/" \
  meson setup \
    --prefix=%{_prefix} \
    %{glib_configure_options} \
    _build

  # build using ninja
  %{_library_path}=$SYSROOT/lib \
  %{_ld_library_path}=$SYSROOT/lib \
  LD="${LD} ${LDFLAGS}" \
  LD_FOR_BUILD="${LD_FOR_BUILD} ${LDFLAGS}" \
  ninja -v -C _build

  cd ${build_top}

%install
  build_top=$(pwd)

  %{__rmdir} $SB_BUILD_ROOT

  cd ${source_dir_glib}
  DESTDIR=$SB_BUILD_ROOT \
  ninja -C _build install
  cd ${build_top}
