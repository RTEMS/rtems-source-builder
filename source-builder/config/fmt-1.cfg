#
# fmt Version 1.
#
# This configuration file configure's, make's and install's fmt
#

%if %{release} == %{nil}
%define release 1
%endif

Name:      fmt-%{fmt_version}-%{_host}-%{release}
Summary:   Inspired by Pythons formatting facility, {fmt} provides a safe
           replacement for the printf family of functions. Errors in format
           strings, which are a common source of vulnerabilities in C, are reported at compile time.
Version:   %{fmt_version}
Release:   %{release}
URL:       https://github.com/fmt/fmt

#
# Source
#
%ifn %{defined fmt_url}
 %define fmt_url https://github.com/fmt/fmt/archive/refs/tags/%{fmt_version}.tar.gz
%endif
%source set fmt --rsb-file=fmt-%{fmt_version}.tar.gz %{fmt_url}

#
# Check for cmake
#
%define cmake %(command -v %{__cmake} || true)
%if %{cmake} == %{nil}
 %error no cmake found found; please install
%endif

#
# Prepare the source code.
#
%prep
  build_top=$(pwd)

  source_dir_fmt="fmt-%{fmt_version}"
  %source setup fmt -q -n fmt-%{fmt_version}
  %patch setup fmt -p1

  cd ${build_top}

%build
  build_top=$(pwd)

  %{build_directory}

  mkdir -p ${build_dir}
  cd ${build_dir}

  # yaml-cpp crosscompile for RTEMS using cmake
  %{__cmake} \
    -DBUILD_SHARED_LIBS=FALSE \
    -DFMT_TEST=FALSE \
    -DFMT_INSTALL=TRUE \
    -DCMAKE_POSITION_INDEPENDENT_CODE=FALSE \
    -DCMAKE_SYSTEM_NAME="Generic" \
    -DCMAKE_CXX_COMPILER=%{rtems_bsp_cxx} \
    -DCMAKE_FIND_ROOT_PATH=%{with_tools} \
    -DCMAKE_CXX_FLAGS="-O2 -g %{rtems_bsp_ccflags}" \
    -DCMAKE_INSTALL_PREFIX=%{_exec_prefix} \
    ../fmt-%{fmt_version}

  %{__make} %{?_smp_mflags} VERBOSE=1

  cd ${build_top}

%install
  build_top=$(pwd)

  %{__rmdir} ${SB_BUILD_ROOT}

  cd ${build_dir}
  %{__make} DESTDIR=$SB_BUILD_ROOT install
  cd ${build_top}

  # RTEMS place everything under the 'arch/bsp/lib' directory as this is
  # what gcc does with a single system directory path
  %{__mv} \
    $SB_BUILD_ROOT/%{_exec_prefix}/include \
    $SB_BUILD_ROOT/%{_exec_prefix}/lib/
